import java.util.*;

class weight{
    int st , et , profit;
    weight(int st , int et , int profit)
    {
        this.st = st;
        this.et = et;
        this.profit = profit;
    }
}

class sorting implements Comparator<weight>
{
    public int compare(weight a, weight b)
    {
        return a.et - b.et;
    }
}

public class JobScheduling {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter # of jobs");
        int n = sc.nextInt();
        ArrayList<weight> list = new ArrayList<>();
        for(int i = 0 ; i<n; i++)
        {
            list.add(new weight(sc.nextInt(),sc.nextInt(),sc.nextInt()));
        }
        Collections.sort(list , new sorting());
        int dp[] = new int[n];
        dp[0] = list.get(0).profit;
        int includeProfit;
        for(int i = 1; i<n ; i++)
        {
            includeProfit = list.get(i).profit;
            int l = binarySearch(list , i);
            if(l!=-1)
                includeProfit = includeProfit + dp[l];
            dp[i] = Math.max(includeProfit , dp[i-1]);
        }
        for(int i = 0; i<n; i++)
        {
            System.out.print(dp[i]+" ");
        }
        System.out.println();
        System.out.println(dp[n-1]);
    }
    public static int binarySearch(ArrayList<weight> list , int i)
    {
        int low = 0, high = i-1;
        //perform binary search iteratively
        while(low<=high)
        {
            int mid = (low+high)/2 ;
            if(list.get(mid).et<=list.get(i).st)
            {
                if (list.get(mid+1).et <= list.get(i).st)
                    low = mid + 1;
                else
                    return mid;
            }
            else
                high = mid-1 ;
        }
        return -1;
    }
}
